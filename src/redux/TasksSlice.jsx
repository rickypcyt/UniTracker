import { createSlice } from '@reduxjs/toolkit';

// Define the initial state of the tasks slice
const initialState = {
  tasks: [], // An empty array to store tasks
};

// Create the tasks slice using the createSlice function from @reduxjs/toolkit
const taskSlice = createSlice({
  name: 'tasks', // Name of the slice
  initialState, // Initial state of the slice
  reducers: {
    // Action to add a new task to the state

    // Action to toggle the completion status of a task
    toggleTaskStatus: (state, action) => {
      // Find the task with the matching ID
      const task = state.tasks.find((t) => t.id === action.payload);
      if (task) {
        // Toggle the completion status of the task
        task.completed = !task.completed;
      }
    },

    // Action to mark a task as completed (set completed to true)
    markTaskAsCompleted: (state, action) => {
      // Find the task with the matching ID
      const task = state.tasks.find((t) => t.id === action.payload);
      if (task) {
        // Set the task as completed
        task.completed = true;
      }
    },

    // Action to mark a task as not completed (set completed to false)
    markTaskAsNotCompleted: (state, action) => {
      // Find the task with the matching ID
      const task = state.tasks.find((t) => t.id === action.payload);
      if (task) {
        // Set the task as not completed
        task.completed = false;
      }
    },

    // Action to delete a task by its ID
    deleteTask: (state, action) => {
      // Filter out the task with the matching ID from the tasks array
      state.tasks = state.tasks.filter((t) => t.id !== action.payload);
    },
  },
});

// Export the actions generated by the slice
export const {
  toggleTaskStatus, // Action to toggle the completion status of a task
  deleteTask, // Action to delete a task
  markTaskAsCompleted, // Action to mark a task as completed
  markTaskAsNotCompleted, // Action to mark a task as not completed
} = taskSlice.actions;

// Export the reducer generated by the slice
export default taskSlice.reducer;
